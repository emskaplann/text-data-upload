{"version":3,"sources":["sub-components/FileUpload.js","sub-components/AdjustSettings.js","sub-components/ConfirmUpload.js","sub-components/CustomProgressBar.js","services/UploadService.js","App.js","serviceWorker.js","index.js"],"names":["FileUpload","props","convertingFile","Spinner","animation","role","className","method","action","id","type","multiple","onChange","onChangeHandler","AdjustSettings","renderAvailableOptions","options","transformedArr","i","length","push","key","value","style","overflow","maxHeight","Row","tableHeaders","Col","lg","Form","Group","controlId","Check","label","defaultChecked","onChangeCheckbox","renderHeaders","Label","Control","as","defaultValue","onChangeList","availableHeaders","ConfirmUpload","transformArraysIntoList","arr","double","selectedHeaders","assignedInfo","name","timestamp","bool","fileUrl","href","target","rel","errorType","generateErrorMessage","errorLists","duplicate_id_list","non_convertible_timestamp_id_list","renderResponseInfo","loadResponseInfo","CustomProgressBar","step","activatedStep","width","display","marginLeft","successfullyCompleted","UploadService","component","this","testURL","prodURL","requestBody","fetch","body","then","r","json","response","status","error","duplicate_id_list_length","non_convertible_timestamp_id_list_length","setState","resultsLoading","state","link","catch","console","log","App","parseComplete","results","parser","errors","data","excludedHeaders","map","el","event","files","substr","window","parseExcelXLSX","parseExcelXLS","selectedFile","alert","newArr","slice","val","assigned","idx","indexOf","newAssHeaders","assignedHeaders","filter","parseInt","targetFormInput","document","getElementsByClassName","children","syncAssHeadersState","currentAssHeaders","Set","includes","parentElement","textContent","toLowerCase","firstElementChild","header","nextButtonHandler","asString","headers","Object","entries","converted","Papa","parse","config","form","FormData","append","uploadService","uploadFileToParse","renderPageTitle","cancelUpload","renderContent","fileLoading","stepToProgress","nextButtonEnabled","delimiter","newline","quoteChar","escapeChar","transformHeader","undefined","dynamicTyping","preview","encoding","worker","comments","complete","download","downloadRequestHeaders","downloadRequestBody","skipEmptyLines","chunk","chunkSize","fastMode","beforeFirstChunk","withCredentials","transform","delimitersToGuess","RECORD_SEP","UNIT_SEP","unparseConfig","quotes","columns","Card","Header","Body","Footer","Button","variant","onClick","disabled","size","aria-hidden","fontSize","textAlign","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3516ff96.chunk.js","sourcesContent":["import React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function FileUpload(props) { \n    if(props.convertingFile) {\n        return(\n            <div>\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n            </div>\n        )\n    } else {\n        return(\n            <div>\n                <h6>Upload your dataset to this page and click next.</h6>\n                <form method=\"post\" action=\"#\" id=\"#\">\n                    <div className=\"form-group files\">\n                        <input type=\"file\" className=\"form-control fc-custom\" multiple=\"\" onChange={props.onChangeHandler} />\n                    </div>\n                    <span className=\"text-muted\">*supports .csv, .tsv, .xlsx and .xls file types.</span>\n                </form>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function AdjustSettings(props) {\n    function renderHeaders(tableHeaders) {\n        const transformedArr = []\n        for(let i = 0; i < tableHeaders.length; i++) {\n            transformedArr.push(\n                <Col lg={4} key={i}>\n                    <Form.Group controlId={i} key={i}>\n                        <Form.Check type=\"checkbox\" label={tableHeaders[i]} defaultChecked={true} onChange={props.onChangeCheckbox} />\n                    </Form.Group>\n                </Col>\n            )\n        }\n        return transformedArr\n    }\n\n    function renderAvailableOptions(options) {\n        const transformedArr = []\n        for(let i = 0; i < options.length; i++) {\n            transformedArr.push(<option key={i} value={i}>{options[i]}</option>)\n        }\n        return transformedArr\n    }\n\n    return(\n        <div style={{overflow: \"auto\", maxHeight: '100%'}}>\n            <div className=\"exclude-columns\">\n                <h6>Exclude columns by untoggling the checkbox.</h6>\n                <div className=\"headers-column\">\n                    <Row>\n                        {renderHeaders(props.tableHeaders)}\n                    </Row>\n                </div>\n            </div>\n            <div>\n                <h6>Choose included columns to uniquely assign to <b>ID, Name,</b> and <b>Timestamp.</b></h6>\n                <div className=\"headers-column\">\n                    <div className=\"list-form-input\">\n                        <Form.Label><b>ID</b></Form.Label>\n                        <Form.Control className=\"fc-custom2\" as=\"select\" defaultValue={null} onChange={props.onChangeList}>\n                            <option key={\"selectVal\"} value=\"-1\">Select Value</option>\n                            {renderAvailableOptions(props.availableHeaders)}\n                        </Form.Control>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Form.Label><b>Name</b></Form.Label>\n                        <Form.Control className=\"fc-custom2\" as=\"select\" defaultValue={null} onChange={props.onChangeList}>\n                            <option key={\"selectVal\"} value=\"-1\">Select Value</option>\n                            {renderAvailableOptions(props.availableHeaders)}\n                        </Form.Control>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Form.Label><b>Timestamp</b></Form.Label>\n                        <Form.Control className=\"fc-custom2\" as=\"select\" defaultValue={null} onChange={props.onChangeList}>\n                            <option key={\"selectVal\"} value=\"-1\">Select Value</option>\n                            {renderAvailableOptions(props.availableHeaders)}\n                        </Form.Control>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function ConfirmUpload(props) {\n    function renderHeaders(tableHeaders) {\n        const transformedArr = []\n        for(let i = 0; i < tableHeaders.length; i++) {\n            transformedArr.push(\n                <Col lg={4} key={i}>                    \n                    <span>{tableHeaders[i]}</span>\n                </Col>\n            )\n        }\n        return transformedArr\n    }\n\n    function generateErrorMessage(errorType) {\n        // errorType: 0 => both, 1 => duplicate_id, 2 => non_convertible_timestamp\n        switch(errorType) {\n            case 0:\n                return <u>were duplicate id's and non-convertible timestamps.</u>\n            case 1:\n                return <u>were duplicate id's.</u>\n            case 2:\n                return <u>were non-convertible timestamps.</u>\n            default:\n                return <u>were duplicate id's and non-convertible timestamps.</u>\n        }\n    }\n\n    function transformArraysIntoList(arr, double) {\n        const transformedArr = []\n        for(let i = 0; i < arr.length; i++) {\n            transformedArr.push(<Col key={i} lg={double ? 4 : 3}>{arr[i]}</Col>)\n        }\n        return transformedArr\n    }\n\n    function generateIdLists(errorLists) {\n        if(errorLists.duplicate_id_list && errorLists.non_convertible_timestamp_id_list) {\n            return(\n                <div>\n                    <Row>\n                        <Col>\n                            Duplicate ID's:\n                            <Row>\n                                {transformArraysIntoList(errorLists.duplicate_id_list, true)}\n                            </Row>\n                        </Col>\n                        <Col>\n                            ID's of the non-convertible timestamps:\n                            <Row>\n                                {transformArraysIntoList(errorLists.non_convertible_timestamp_id_list, true)}\n                            </Row>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        } else if(errorLists.duplicate_id_list) {\n            return(\n                <div>\n                    Duplicate ID's:\n                    <Row>\n                        {transformArraysIntoList(errorLists.duplicate_id_list, false)}\n                    </Row>\n                </div>\n            )\n        } else {\n            return(\n                <div>\n                    ID's of the non-convertible timestamps:\n                    <Row>\n                        {transformArraysIntoList(errorLists.non_convertible_timestamp_id_list, false)}\n                    </Row>\n                </div>\n            )\n        }\n    }\n\n    function renderResponseInfo(bool) {\n        if(bool) {\n            if(props.fileUrl) {\n                // success\n                return(\n                    <div className=\"response-info\">\n                        <h6><b>Your dataset was succesfully imported to our system.</b> You can upload another dataset if you'd like to.</h6>\n                        <br />\n                        <b><a href={props.fileUrl}>Download the imported dataset.</a></b>\n                        <br />\n                        <i><b><a href=\"http://calm-ocean-20734.herokuapp.com/text_data_files/\" target=\"_blank\" rel=\"noopener noreferrer\">See index page for all imported files.</a></b></i>\n                    </div>\n                )\n            } else {\n                // error\n                return(\n                    <div className=\"response-info\">\n                        <h6>{\"We couldn't import your file because there \"}{generateErrorMessage(props.errorType)}</h6>\n                        {generateIdLists(props.errorLists)}\n                    </div>\n                )\n            }\n        }\n    }\n\n    return(\n        <div style={{overflow: \"auto\", maxHeight: '100%'}}>\n            <div className=\"exclude-columns\">\n                <h6>Included Columns:</h6>\n                <div className=\"headers-column\">\n                    <Row>\n                        {renderHeaders(props.selectedHeaders)}\n                    </Row>\n                </div>\n            </div>\n            <div>\n                <h6>ID, Name, and Timestamp assignment:</h6>\n                <div className=\"headers-column\">\n                    <div className=\"list-form-input\">\n                        <Row>\n                            <Col lg={3}>\n                                <h6><b>ID:</b></h6>\n                            </Col>\n                            <Col>\n                                {props.assignedInfo.id}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Row>\n                            <Col lg={3}>\n                                <h6><b>Name:</b></h6>\n                            </Col>\n                            <Col>\n                                {props.assignedInfo.name}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Row>\n                            <Col lg={3}>\n                                <h6><b>Timestamp:</b></h6>\n                            </Col>\n                            <Col>\n                                {props.assignedInfo.timestamp}\n                            </Col>\n                        </Row>                       \n                    </div>\n                </div>\n            </div>\n            {renderResponseInfo(props.loadResponseInfo)}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function CustomProgressBar(props) {\n    const step = props.activatedStep\n    return(\n        <div className=\"myProgress\">\n            <div className=\"myBar\">\n                <div className=\"step-container\" style={{width: step > 1 ? step > 2 ? \"100%\" : \"50%\" : \"0%\"}}>\n                    <span className={step === 1 ? \"step-activated\" : \"step-completed\"}><span className=\"check-mark\" style={{display: step === 1 ? \"none\" : \"block\"}}>✓</span></span>\n                    <span className={step < 2 ? \"step\" : step === 2 ? \"step-activated\" : \"step-completed\"} style={{marginLeft: \"50%\"}}><span className=\"check-mark\" style={{display: step === 3 ? \"block\" : \"none\"}}>✓</span></span>\n                    <span className={step > 2 ? props.successfullyCompleted ? \"step-completed\" : \"step-activated\" : \"step\"} style={{marginLeft: \"100%\"}}><span className=\"check-mark\" style={{display: !props.successfullyCompleted ? \"none\" : \"block\"}}>✓</span></span>\n                </div>\n            </div>\n            <small className=\"step-text\">Upload Dataset</small>\n            <small className=\"step-text\" style={{marginLeft: \"50%\"}}>Adjust Settings</small>\n            <small className=\"step-text\" style={{marginLeft: \"97%\"}}>Confirm & Upload</small>\n        </div>\n    )\n}","export default class UploadService {\n    constructor(component) {\n        this.testURL = \"http://localhost:3000/text_data_files\"\n        this.prodURL = \"https://calm-ocean-20734.herokuapp.com/text_data_files\"\n        this.component = component\n    }\n\n    uploadFileToParse(requestBody) {\n        fetch(this.testURL, { // changing prod - test from here for server\n            method: \"POST\",\n            body: requestBody\n        })\n        .then(r => r.json())\n        .then(response => {\n            if(response.status === 500) {\n                // error arised in backend\n                return;\n            }\n            if(response.error) {\n                // handle error\n                // errorType: 0 => both, 1 => duplicate_id, 2 => non_convertible_timestamp\n                let errorType = null\n                let errorLists = null\n                if(response.duplicate_id_list_length > 0 && response.non_convertible_timestamp_id_list_length > 0) {\n                    errorType = 0\n                    errorLists = {\n                        duplicate_id_list: response.duplicate_id_list,\n                        non_convertible_timestamp_id_list: response.non_convertible_timestamp_id_list\n                    }\n                } else if(response.duplicate_id_list_length > 0) {\n                    errorType = 1\n                    errorLists = {\n                        duplicate_id_list: response.duplicate_id_list,\n                    }\n                } else {\n                    errorType = 2\n                    errorLists = {\n                        non_convertible_timestamp_id_list: response.non_convertible_timestamp_id_list\n                    }\n                }\n                this.component.setState({errorType: errorType, errorLists: errorLists}, () => {\n                    this.component.setState({loadResponseInfo: true}, () => {\n                        this.component.setState({resultsLoading: !this.component.state.resultsLoading})\n                    })\n                })\n            } else {\n                //handle success\n                this.component.setState({fileUrl: response.link}, () => {\n                    this.component.setState({loadResponseInfo: true}, () => {\n                        this.component.setState({resultsLoading: !this.component.state.resultsLoading, successfullyCompleted: true})\n                    })\n                })\n            }\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n}","import React from 'react';\nimport { Card, Button, Row, Col, Spinner } from 'react-bootstrap';\nimport FileUpload from './sub-components/FileUpload.js';\nimport AdjustSettings from './sub-components/AdjustSettings.js';\nimport ConfirmUpload from './sub-components/ConfirmUpload.js';\nimport CustomProgressBar from './sub-components/CustomProgressBar.js';\nimport UploadService from './services/UploadService.js';\nimport Papa from 'papaparse';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      step: 1,\n      selectedFile: null,\n      tableHeaders: [],\n      excludedHeaders: [],\n      assignedHeaders: [],\n      assigned: {\n        id: null,\n        name: null,\n        timestamp: null\n      },\n      resultsLoading: false,\n      loadResponseInfo: false,\n      convertingFile: false,\n      asString: false,\n    }\n\n    this.uploadService = new UploadService(this)\n    \n    this.config = {\n      delimiter: \"\",\t// auto-detect\n      newline: \"\",\t// auto-detect\n      quoteChar: '\"',\n      escapeChar: '\"',\n      header: false,\n      transformHeader: undefined,\n      dynamicTyping: false,\n      preview: 1, // for getting the headers\n      encoding: \"\",\n      worker: false,\n      comments: false,\n      step: undefined,\n      complete: this.parseComplete,\n      error: undefined,\n      download: false,\n      downloadRequestHeaders: undefined,\n      downloadRequestBody: undefined,\n      skipEmptyLines: false,\n      chunk: undefined,\n      chunkSize: undefined,\n      fastMode: undefined,\n      beforeFirstChunk: undefined,\n      withCredentials: undefined,\n      transform: undefined,\n      delimitersToGuess: [',', '\\t', '|', ';', Papa.RECORD_SEP, Papa.UNIT_SEP]\n    }\n\n    this.unparseConfig = {\n      quotes: false, //or array of booleans\n      quoteChar: '\"',\n      escapeChar: '\"',\n      delimiter: \",\",\n      header: true,\n      newline: \"\\r\\n\",\n      skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.\n      columns: null //or array of strings\n    }\n  }\n  \n  parseComplete = (results, parser) => {\n    if(results.errors.length > 0) {\n      // error handling\n\n    } else {\n      // load start\n      this.setState({tableHeaders: results.data[0], excludedHeaders: results.data[0].map(el => true)}, function(){\n        this.setState({step: 2}, function() {\n          // load end\n\n        })\n      })\n    }\n  }\n\n  onChangeHandler = event => {\n    if(event.target.files[0].name.substr(-4) === \"xlsx\") {\n      //if file is .xlsx\n      window.parseExcelXLSX(event.target.files[0], this)\n    } else if(event.target.files[0].name.substr(-3) === \"xls\") {\n      //if file is .xls\n      window.parseExcelXLS(event.target.files[0], this)\n    } else if(event.target.files[0].name.substr(-3) === \"csv\" || event.target.files[0].name.substr(-3) === \"tsv\") {\n      //if file is .csv or .tsv\n      this.setState({selectedFile: event.target.files[0]})\n    } else {\n      //if file is not supported\n      window.alert(\"Our system doesn't support the file. Please convert it to one of the supported file type and then try again.\")\n      event.target.value = \"\"\n    }\n  }\n\n  onChangeCheckbox = event => {\n    const newArr = this.state.excludedHeaders.slice()\n    newArr[event.target.id] = !newArr[event.target.id]\n    for(let val in this.state.assigned) {\n      if(this.state.assigned[val] === this.state.tableHeaders[event.target.id]) {\n        let availableHeaders = this.availableHeaders()\n        let idx = availableHeaders.indexOf(this.state.tableHeaders[event.target.id])\n        let newAssHeaders = this.state.assignedHeaders.filter(el => parseInt(el) === idx ? false : true)\n        let targetFormInput = 0\n        switch(val) {\n          case \"id\":\n            targetFormInput = 0\n            break;\n          case \"name\":\n            targetFormInput = 1\n            break;\n          case \"timestamp\":\n            targetFormInput = 2\n            break;\n          default:\n            targetFormInput = 0\n            break;\n        }\n        let input = document.getElementsByClassName(\"list-form-input\")[targetFormInput]\n        input.children[1].value = -1\n        this.setState({\n          assigned: {...this.state.assigned, [val]: null},\n          assignedHeaders: newAssHeaders\n        })\n      }\n    }\n    this.setState({excludedHeaders: newArr})\n  }\n\n  syncAssHeadersState = () => {\n    let currentAssHeaders = []\n    for(let val in this.state.assigned) {\n      let i = this.availableHeaders().indexOf(this.state.assigned[val])\n      if(i > -1) currentAssHeaders.push(i)\n    }\n\n    this.setState({assignedHeaders: [...new Set(currentAssHeaders)]})\n  }\n\n  onChangeList = event => {\n    let val = parseInt(event.target.value)\n    if(val > -1) {\n      // debugger\n      if(this.state.assignedHeaders.includes(val)) {\n        window.alert(\"You already assigned this column.\")\n        let idx = this.availableHeaders().indexOf(this.state.assigned[event.target.parentElement.children[0].textContent.toLowerCase()])\n        event.target.value = idx\n        return;\n      }\n      this.state.assignedHeaders.push(val)\n      this.setState({assigned: {...this.state.assigned, [event.target.parentElement.firstElementChild.textContent.toLowerCase()]: this.availableHeaders()[val]}}, this.syncAssHeadersState)\n    } else {\n      //remove the value from assigned\n      let header = this.state.assigned[event.target.parentElement.firstElementChild.textContent.toLowerCase()]\n      let idx = this.availableHeaders().indexOf(header)\n      let newAssHeaders = this.state.assignedHeaders.filter((el) => parseInt(el) !== idx ? true : false)\n      this.setState({assigned: {...this.state.assigned, [event.target.parentElement.firstElementChild.textContent.toLowerCase()]: null}, assignedHeaders: newAssHeaders})\n    }\n  }\n\n  nextButtonHandler = event => {\n    switch(this.state.step) {\n      case 1:\n        if(!this.state.selectedFile) {\n          window.alert(\"Please select a file to move forward.\")\n        } else {\n          // move forward\n          if(this.state.asString) {\n            const headers = []\n            for (const [key, value] of Object.entries(this.state.converted[0])) {headers.push(key)} //eslint-disable-line\n            this.setState({tableHeaders: headers, excludedHeaders: headers.map(el => true)}, function(){\n              this.setState({step: 2}, function() {\n                // load end\n              })\n            })\n          } else {\n            Papa.parse(this.state.selectedFile, this.config)\n          }\n          this.setState({step: 2})\n        }\n        break;\n      case 2:\n        this.setState({step: 3})\n        break;\n      case 3:\n        if(!this.state.errorType && !this.state.successfullyCompleted) {\n          // send the request\n          // start loading icon\n          this.setState({resultsLoading: !this.state.resultsLoading})\n          const form = new FormData()\n          form.append(\"file\", this.state.selectedFile)\n          form.append(\"table_headers\", this.availableHeaders())\n          form.append(\"id\", this.state.assigned.id)\n          form.append(\"name\", this.state.assigned.name)\n          form.append(\"timestamp\", this.state.assigned.timestamp)\n          form.append(\"as_string\", this.state.asString)\n          this.uploadService.uploadFileToParse(form)\n          // end loading icon\n        } else {\n          // upload another, reset the state\n          this.setState({\n            step: 1,\n            selectedFile: null,\n            tableHeaders: [],\n            excludedHeaders: [],\n            assignedHeaders: [],\n            assigned: {\n              id: null,\n              name: null,\n              timestamp: null\n            },\n            resultsLoading: false,\n            loadResponseInfo: false,\n            successfullyCompleted: false,\n            errorType: null,\n            errorLists: null,\n            convertingFile: false,\n            asString: false,\n            fileUrl: null,\n            converted: null,\n          })\n        }        \n        break;\n      default:\n        console.log(this.state.step)\n    }\n  }\n\n  renderPageTitle = () => {\n    switch(this.state.step) {\n      case 1:\n        return \"Upload Dataset\"\n      case 2:\n        return \"Adjust Settings\"\n      case 3:\n        return \"Confirm & Upload\"\n      default:\n        console.log(this.state.step)\n    }\n  }\n\n  availableHeaders = () => {\n    return this.state.tableHeaders.filter((el, idx) => {\n      if(this.state.excludedHeaders[idx]) {\n        return true\n      }\n      return false\n    })\n  }\n\n  cancelUpload = event => {\n    // cancel upload\n    this.setState({\n      step: 1,\n      selectedFile: null,\n      tableHeaders: [],\n      excludedHeaders: [],\n      assignedHeaders: [],\n      assigned: {\n        id: null,\n        name: null,\n        timestamp: null\n      },\n      resultsLoading: false,\n      loadResponseInfo: false,\n      successfullyCompleted: false,\n      errorType: null,\n      errorLists: null,\n      convertingFile: false,\n      asString: false,\n      fileUrl: null,\n      converted: null,\n    })\n  }\n\n  renderContent = () => {\n    switch(this.state.step) {\n      case 1:\n        return <FileUpload onChangeHandler={this.onChangeHandler} fileLoading={this.state.convertingFile} />\n      case 2:\n        return <AdjustSettings availableHeaders={this.availableHeaders()} tableHeaders={this.state.tableHeaders} onChangeCheckbox={this.onChangeCheckbox} onChangeList={this.onChangeList} />\n      case 3:\n        return <ConfirmUpload selectedHeaders={this.availableHeaders()} assignedInfo={this.state.assigned} loadResponseInfo={this.state.loadResponseInfo} errorType={this.state.errorType} errorLists={this.state.errorLists} fileUrl={this.state.fileUrl} />\n      default: \n        return <FileUpload onChangeHandler={this.onChangeHandler} />\n    }\n  }\n\n  stepToProgress = () => {\n    switch(this.state.step) {\n      case 1:\n        return 0\n      case 2:\n        return 50\n      case 3:\n        return 100\n      default:\n        return 0\n    }\n  }\n\n  nextButtonEnabled = () => {\n    switch(this.state.step) {\n      case 1:\n        if(this.state.selectedFile) return true\n        break;\n      case 2:\n        if(this.state.assigned.id && this.state.assigned.name && this.state.assigned.timestamp && this.state.excludedHeaders.includes(true)) return true\n        break;\n      case 3:\n        if(this.state.assigned.id && this.state.assigned.name && this.state.assigned.timestamp && this.state.excludedHeaders.includes(true)) return true\n        break;\n      default:\n        return false\n    }\n  }\n\n  render() {\n    return(\n      <>\n      <Card className=\"main-container\">\n        <Card.Header as=\"div\">\n          <Row>\n            <Col lg={4}>\n              <h5 className=\"card-title\">{this.renderPageTitle()}</h5>\n            </Col>\n            <Col lg={8}>\n              <CustomProgressBar activatedStep={this.state.step} successfullyCompleted={this.state.successfullyCompleted} />\n            </Col>\n          </Row>\n        </Card.Header>\n        <Card.Body>\n          {/* <Card.Title>Special title treatment</Card.Title>\n          <Card.Text>\n            With supporting text below as a natural lead-in to additional content.\n          </Card.Text> */}\n          {this.renderContent()}\n        </Card.Body>\n        <Card.Footer>\n          {this.state.step > 1 && !this.state.successfullyCompleted ? <Button className=\"cancel-button\" variant=\"secondary\" onClick={this.cancelUpload}>Cancel</Button> : null}\n          {\n            !this.state.resultsLoading ? <Button className=\"move-forward-button\" variant=\"primary\" onClick={this.nextButtonHandler} disabled={!this.nextButtonEnabled()}>{this.state.step === 3 ? this.state.errorType || this.state.successfullyCompleted ? \"Upload Another\" : \"Upload\" : \"Next\"}</Button>\n            : <Button className=\"move-forward-button\" variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"sr-only\">Loading...</span>\n              </Button>\n          }\n        </Card.Footer>\n      </Card>\n      <p className=\"text-muted\" style={{fontSize: '11px', textAlign: 'center', width: '100%'}}>created by emirhan kaplan at 2020.</p>\n      </>\n    )\n  }\n}\n\nexport default App;\n\n// .TXT Conversion - Not Working!\n// else if(event.target.files[0].name.substr(-3) === \"txt\") {\n//   var reader = new FileReader();\n//   var component = this\n//   reader.onload = function(event) {\n//     var cells = event.target.result.split('\\n').map(function (el) { return el.split(/\\s+/); });\n//     var headings = cells.shift();\n//     var json_object = cells.map(function (el) {\n//       var obj = {};\n//       for (var i = 0, l = el.length; i < l; i++) {\n//         obj[headings[i]] = isNaN(Number(el[i])) ? el[i] : +el[i];\n//       }\n//       return obj;\n//     });\n//     component.setState({converted: json_object}, function() {\n//       //after loaded\n//       const convertedToString = Papa.unparse(json_object, this.unparseConfig)\n//       component.setState({convertingFile: false, selectedFile: convertedToString, asString: true})\n//       console.log(convertedToString)\n//     })\n//   };\n//   reader.readAsText(event.target.files[0]);\n// } ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}