{"version":3,"sources":["sub-components/FileUpload.js","sub-components/AdjustSettings.js","sub-components/ConfirmUpload.js","sub-components/CustomProgressBar.js","services/UploadService.js","App.js","serviceWorker.js","index.js"],"names":["FileUpload","props","convertingFile","Spinner","animation","role","className","method","action","id","type","multiple","onChange","onChangeHandler","AdjustSettings","renderAvailableOptions","options","transformedArr","i","length","push","key","value","style","overflow","maxHeight","Row","tableHeaders","Col","lg","Form","Group","controlId","Check","label","defaultChecked","onChangeCheckbox","renderHeaders","Label","Control","as","defaultValue","onChangeList","availableHeaders","ConfirmUpload","transformArraysIntoList","arr","double","selectedHeaders","assignedInfo","name","timestamp","bool","fileUrl","href","target","rel","errorType","generateErrorMessage","errorLists","duplicate_id_list","non_convertible_timestamp_id_list","renderResponseInfo","loadResponseInfo","CustomProgressBar","step","activatedStep","width","display","marginLeft","successfullyCompleted","UploadService","component","this","testURL","prodURL","error","errorMsg","setState","selectedFile","excludedHeaders","assignedHeaders","assigned","resultsLoading","asString","window","alert","requestBody","fetch","body","then","r","json","response","link","duplicate_id_list_length","non_convertible_timestamp_id_list_length","state","cancelUploadAndShowError","catch","App","parseComplete","results","parser","errors","data","map","el","event","files","substr","parseExcelXLSX","parseExcelXLS","newArr","slice","val","idx","indexOf","newAssHeaders","filter","parseInt","targetFormInput","document","getElementsByClassName","children","syncAssHeadersState","currentAssHeaders","Set","includes","parentElement","textContent","toLowerCase","firstElementChild","header","nextButtonHandler","headers","Object","entries","converted","Papa","parse","config","form","FormData","append","uploadService","uploadFileToParse","console","log","renderPageTitle","cancelUpload","renderContent","fileLoading","stepToProgress","nextButtonEnabled","delimiter","newline","quoteChar","escapeChar","transformHeader","undefined","dynamicTyping","preview","encoding","worker","comments","complete","download","downloadRequestHeaders","downloadRequestBody","skipEmptyLines","chunk","chunkSize","fastMode","beforeFirstChunk","withCredentials","transform","delimitersToGuess","RECORD_SEP","UNIT_SEP","unparseConfig","quotes","columns","Card","Header","Body","Footer","Button","variant","onClick","disabled","size","aria-hidden","fontSize","textAlign","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yXAIe,SAASA,EAAWC,GAC/B,OAAGA,EAAMC,eAED,6BACI,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC7B,0BAAMC,UAAU,WAAhB,gBAMR,6BACI,gGACA,0BAAMC,OAAO,OAAOC,OAAO,IAAIC,GAAG,KAC9B,yBAAKH,UAAU,oBACX,2BAAOI,KAAK,OAAOJ,UAAU,yBAAyBK,SAAS,GAAGC,SAAUX,EAAMY,mBAEtF,0BAAMP,UAAU,cAAhB,sD,YCjBL,SAASQ,EAAeb,GAenC,SAASc,EAAuBC,GAE5B,IADA,IAAMC,EAAiB,GACfC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAC/BD,EAAeG,KAAK,4BAAQC,IAAKH,EAAGI,MAAOJ,GAAIF,EAAQE,KAE3D,OAAOD,EAGX,OACI,yBAAKM,MAAO,CAACC,SAAU,OAAQC,UAAW,SACtC,yBAAKnB,UAAU,mBACX,2EACA,yBAAKA,UAAU,kBACX,kBAACoB,EAAA,EAAD,KA3BhB,SAAuBC,GAEnB,IADA,IAAMV,EAAiB,GACfC,EAAI,EAAGA,EAAIS,EAAaR,OAAQD,IACpCD,EAAeG,KACX,kBAACQ,EAAA,EAAD,CAAKC,GAAI,EAAGR,IAAKH,GACb,kBAACY,EAAA,EAAKC,MAAN,CAAYC,UAAWd,EAAGG,IAAKH,GAC3B,kBAACY,EAAA,EAAKG,MAAN,CAAYvB,KAAK,WAAWwB,MAAOP,EAAaT,GAAIiB,gBAAgB,EAAMvB,SAAUX,EAAMmC,sBAK1G,OAAOnB,EAiBUoB,CAAcpC,EAAM0B,iBAIjC,6BACI,6EAAkD,wCAAlD,QAAuE,0CACvE,yBAAKrB,UAAU,kBACX,yBAAKA,UAAU,mBACX,kBAACwB,EAAA,EAAKQ,MAAN,KAAY,kCACZ,kBAACR,EAAA,EAAKS,QAAN,CAAcjC,UAAU,aAAakC,GAAG,SAASC,aAAc,KAAM7B,SAAUX,EAAMyC,cACjF,4BAAQrB,IAAK,YAAaC,MAAM,MAAhC,gBACCP,EAAuBd,EAAM0C,oBAGtC,yBAAKrC,UAAU,mBACX,kBAACwB,EAAA,EAAKQ,MAAN,KAAY,oCACZ,kBAACR,EAAA,EAAKS,QAAN,CAAcjC,UAAU,aAAakC,GAAG,SAASC,aAAc,KAAM7B,SAAUX,EAAMyC,cACjF,4BAAQrB,IAAK,YAAaC,MAAM,MAAhC,gBACCP,EAAuBd,EAAM0C,oBAGtC,yBAAKrC,UAAU,mBACX,kBAACwB,EAAA,EAAKQ,MAAN,KAAY,yCACZ,kBAACR,EAAA,EAAKS,QAAN,CAAcjC,UAAU,aAAakC,GAAG,SAASC,aAAc,KAAM7B,SAAUX,EAAMyC,cACjF,4BAAQrB,IAAK,YAAaC,MAAM,MAAhC,gBACCP,EAAuBd,EAAM0C,uBCtD3C,SAASC,EAAc3C,GA2BlC,SAAS4C,EAAwBC,EAAKC,GAElC,IADA,IAAM9B,EAAiB,GACfC,EAAI,EAAGA,EAAI4B,EAAI3B,OAAQD,IAC3BD,EAAeG,KAAK,kBAACQ,EAAA,EAAD,CAAKP,IAAKH,EAAGW,GAAIkB,EAAS,EAAI,GAAID,EAAI5B,KAE9D,OAAOD,EAqEX,OACI,yBAAKM,MAAO,CAACC,SAAU,OAAQC,UAAW,SACtC,yBAAKnB,UAAU,mBACX,iDACA,yBAAKA,UAAU,kBACX,kBAACoB,EAAA,EAAD,KAzGhB,SAAuBC,GAEnB,IADA,IAAMV,EAAiB,GACfC,EAAI,EAAGA,EAAIS,EAAaR,OAAQD,IACpCD,EAAeG,KACX,kBAACQ,EAAA,EAAD,CAAKC,GAAI,EAAGR,IAAKH,GACb,8BAAOS,EAAaT,MAIhC,OAAOD,EAiGUoB,CAAcpC,EAAM+C,oBAIjC,6BACI,mEACA,yBAAK1C,UAAU,kBACX,yBAAKA,UAAU,mBACX,kBAACoB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACL,0BAAMvB,UAAU,oBAAmB,oCAEvC,kBAACsB,EAAA,EAAD,KACK3B,EAAMgD,aAAaxC,MAIhC,yBAAKH,UAAU,mBACX,kBAACoB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACL,0BAAMvB,UAAU,oBAAmB,sCAEvC,kBAACsB,EAAA,EAAD,KACK3B,EAAMgD,aAAaC,QAIhC,yBAAK5C,UAAU,mBACX,kBAACoB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACL,0BAAMvB,UAAU,oBAAmB,2CAEvC,kBAACsB,EAAA,EAAD,KACK3B,EAAMgD,aAAaE,eAhEhD,SAA4BC,GACxB,GAAGA,EACC,OAAGnD,EAAMoD,QAGD,yBAAK/C,UAAU,iBACX,4BAAI,mFAAJ,qDACA,6BACA,2BAAG,uBAAGgD,KAAMrD,EAAMoD,SAAf,mCACH,6BACA,2BAAG,2BAAG,uBAAGC,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,6CAMV,yBAAKlD,UAAU,iBACX,4BAAK,8CAhFzB,SAA8BmD,GAE1B,OAAOA,GACH,KAAK,EACD,OAAO,kFACX,KAAK,EACD,OAAO,mDACX,KAAK,EACD,OAAO,+DACX,QACI,OAAO,mFAsEqDC,CAAqBzD,EAAMwD,aA1D1EE,EA2DY1D,EAAM0D,YA1DzBC,mBAAqBD,EAAWE,kCAEtC,6BACI,kBAACnC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,uBAEI,kBAACF,EAAA,EAAD,KACKmB,EAAwBc,EAAWC,mBAAmB,KAG/D,kBAAChC,EAAA,EAAD,+CAEI,kBAACF,EAAA,EAAD,KACKmB,EAAwBc,EAAWE,mCAAmC,OAMrFF,EAAWC,kBAEb,+CAEI,kBAAClC,EAAA,EAAD,KACKmB,EAAwBc,EAAWC,mBAAmB,KAM/D,uEAEI,kBAAClC,EAAA,EAAD,KACKmB,EAAwBc,EAAWE,mCAAmC,MAlC3F,IAAyBF,EA+GhBG,CAAmB7D,EAAM8D,mBCpJvB,SAASC,EAAkB/D,GACtC,IAAMgE,EAAOhE,EAAMiE,cACnB,OACI,yBAAK5D,UAAU,cACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,iBAAiBiB,MAAO,CAAC4C,MAAOF,EAAO,EAAIA,EAAO,EAAI,OAAS,MAAQ,OAClF,0BAAM3D,UAAoB,IAAT2D,EAAa,iBAAmB,kBAAkB,0BAAM3D,UAAU,aAAaiB,MAAO,CAAC6C,QAAkB,IAATH,EAAa,OAAS,UAApE,WACnE,0BAAM3D,UAAW2D,EAAO,EAAI,OAAkB,IAATA,EAAa,iBAAmB,iBAAkB1C,MAAO,CAAC8C,WAAY,QAAQ,0BAAM/D,UAAU,aAAaiB,MAAO,CAAC6C,QAAkB,IAATH,EAAa,QAAU,SAArE,WACnH,0BAAM3D,UAAW2D,EAAO,EAAIhE,EAAMqE,sBAAwB,iBAAmB,iBAAmB,OAAQ/C,MAAO,CAAC8C,WAAY,SAAS,0BAAM/D,UAAU,aAAaiB,MAAO,CAAC6C,QAAUnE,EAAMqE,sBAAiC,QAAT,SAA7E,aAG7I,2BAAOhE,UAAU,aAAjB,kBACA,2BAAOA,UAAU,YAAYiB,MAAO,CAAC8C,WAAY,QAAjD,mBACA,2BAAO/D,UAAU,YAAYiB,MAAO,CAAC8C,WAAY,QAAjD,qB,ICfSE,E,WACjB,WAAYC,GAAY,oBACpBC,KAAKC,QAAU,wCACfD,KAAKE,QAAU,yDACfF,KAAKD,UAAYA,E,qEAGII,GACrB,IAAMC,EAAWD,EAAK,sCAAkCA,GAAU,GAClEH,KAAKD,UAAUM,SAAS,CACpBb,KAAM,EACNc,aAAc,KACdpD,aAAc,GACdqD,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,CACNzE,GAAI,KACJyC,KAAM,KACNC,UAAW,MAEfgC,gBAAgB,EAChBpB,kBAAkB,EAClB7D,gBAAgB,EAChBkF,UAAU,IACX,WACCC,OAAOC,MAAM,gDAAkDT,Q,wCAIrDU,GAAc,IAAD,OAC3BC,MAAMf,KAAKE,QAAS,CAChBpE,OAAQ,OACRkF,KAAMF,IAETG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACF,GAAIA,EAASjB,OAAUiB,EAASC,KAGzB,GAAGD,EAASjB,MAAO,CAGtB,IAAInB,EAAY,KACZE,EAAa,KACdkC,EAASE,yBAA2B,GAAKF,EAASG,yCAA2C,GAC5FvC,EAAY,EACZE,EAAa,CACTC,kBAAmBiC,EAASjC,kBAC5BC,kCAAmCgC,EAAShC,oCAE1CgC,EAASE,yBAA2B,GAC1CtC,EAAY,EACZE,EAAa,CACTC,kBAAmBiC,EAASjC,qBAGhCH,EAAY,EACZE,EAAa,CACTE,kCAAmCgC,EAAShC,oCAGpD,EAAKW,UAAUM,SAAS,CAACrB,UAAWA,EAAWE,WAAYA,IAAa,WACpE,EAAKa,UAAUM,SAAS,CAACf,kBAAkB,IAAO,WAC9C,EAAKS,UAAUM,SAAS,CAACK,gBAAiB,EAAKX,UAAUyB,MAAMd,4BAKvE,EAAKX,UAAUM,SAAS,CAACzB,QAASwC,EAASC,OAAO,WAC9C,EAAKtB,UAAUM,SAAS,CAACf,kBAAkB,IAAO,WAC9C,EAAKS,UAAUM,SAAS,CAACK,gBAAiB,EAAKX,UAAUyB,MAAMd,eAAgBb,uBAAuB,eAhC9G,EAAK4B,8BAqCZC,OAAM,SAAAvB,GAAK,OAAI,EAAKsB,yBAAyBtB,U,sBCsSvCwB,E,kDAtWb,aAAe,IAAD,8BACZ,gBA6DFC,cAAgB,SAACC,EAASC,GACrBD,EAAQE,OAAOrF,OAAS,GAKzB,EAAK2D,SAAS,CAACnD,aAAc2E,EAAQG,KAAK,GAAIzB,gBAAiBsB,EAAQG,KAAK,GAAGC,KAAI,SAAAC,GAAE,OAAI,OAAQ,WAC/FlC,KAAKK,SAAS,CAACb,KAAM,IAAI,mBArEjB,EA6EdpD,gBAAkB,SAAA+F,GAC6B,SAA1CA,EAAMrD,OAAOsD,MAAM,GAAG3D,KAAK4D,QAAQ,GAEpCzB,OAAO0B,eAAeH,EAAMrD,OAAOsD,MAAM,GAAzC,gBACkD,QAA1CD,EAAMrD,OAAOsD,MAAM,GAAG3D,KAAK4D,QAAQ,GAE3CzB,OAAO2B,cAAcJ,EAAMrD,OAAOsD,MAAM,GAAxC,gBACkD,QAA1CD,EAAMrD,OAAOsD,MAAM,GAAG3D,KAAK4D,QAAQ,IAA0D,QAA1CF,EAAMrD,OAAOsD,MAAM,GAAG3D,KAAK4D,QAAQ,GAE9F,EAAKhC,SAAS,CAACC,aAAc6B,EAAMrD,OAAOsD,MAAM,MAGhDxB,OAAOC,MAAM,gHACbsB,EAAMrD,OAAOjC,MAAQ,KA1FX,EA8Fdc,iBAAmB,SAAAwE,GACjB,IAAMK,EAAS,EAAKhB,MAAMjB,gBAAgBkC,QAE1C,IAAI,IAAIC,KADRF,EAAOL,EAAMrD,OAAO9C,KAAOwG,EAAOL,EAAMrD,OAAO9C,IAChC,EAAKwF,MAAMf,SACrB,EAAKe,MAAMf,SAASiC,KAAS,EAAKlB,MAAMtE,aAAaiF,EAAMrD,OAAO9C,KAAM,WACzE,IACI2G,EADmB,EAAKzE,mBACD0E,QAAQ,EAAKpB,MAAMtE,aAAaiF,EAAMrD,OAAO9C,KACpE6G,EAAgB,EAAKrB,MAAMhB,gBAAgBsC,QAAO,SAAAZ,GAAE,OAAIa,SAASb,KAAQS,KACzEK,EAAkB,EACtB,OAAON,GACL,IAAK,KACHM,EAAkB,EAClB,MACF,IAAK,OACHA,EAAkB,EAClB,MACF,IAAK,YACHA,EAAkB,EAClB,MACF,QACEA,EAAkB,EAGVC,SAASC,uBAAuB,mBAAmBF,GACzDG,SAAS,GAAGtG,OAAS,EAC3B,EAAKwD,SAAS,CACZI,SAAS,2BAAK,EAAKe,MAAMf,UAAjB,kBAA4BiC,EAAM,OAC1ClC,gBAAiBqC,IAvBsD,GA2B7E,EAAKxC,SAAS,CAACE,gBAAiBiC,KA7HpB,EAgIdY,oBAAsB,WACpB,IAAIC,EAAoB,GACxB,IAAI,IAAIX,KAAO,EAAKlB,MAAMf,SAAU,CAClC,IAAIhE,EAAI,EAAKyB,mBAAmB0E,QAAQ,EAAKpB,MAAMf,SAASiC,IACzDjG,GAAK,GAAG4G,EAAkB1G,KAAKF,GAGpC,EAAK4D,SAAS,CAACG,gBAAgB,YAAK,IAAI8C,IAAID,OAvIhC,EA0IdpF,aAAe,SAAAkE,GACb,IAAIO,EAAMK,SAASZ,EAAMrD,OAAOjC,OAChC,GAAG6F,GAAO,EAAG,CAEX,GAAG,EAAKlB,MAAMhB,gBAAgB+C,SAASb,GAAM,CAC3C9B,OAAOC,MAAM,qCACb,IAAI8B,EAAM,EAAKzE,mBAAmB0E,QAAQ,EAAKpB,MAAMf,SAAS0B,EAAMrD,OAAO0E,cAAcL,SAAS,GAAGM,YAAYC,gBAEjH,YADAvB,EAAMrD,OAAOjC,MAAQ8F,GAGvB,EAAKnB,MAAMhB,gBAAgB7D,KAAK+F,GAChC,EAAKrC,SAAS,CAACI,SAAS,2BAAK,EAAKe,MAAMf,UAAjB,kBAA4B0B,EAAMrD,OAAO0E,cAAcG,kBAAkBF,YAAYC,cAAgB,EAAKxF,mBAAmBwE,MAAQ,EAAKU,yBAC5J,CAEL,IAAIQ,EAAS,EAAKpC,MAAMf,SAAS0B,EAAMrD,OAAO0E,cAAcG,kBAAkBF,YAAYC,eACtFf,EAAM,EAAKzE,mBAAmB0E,QAAQgB,GACtCf,EAAgB,EAAKrB,MAAMhB,gBAAgBsC,QAAO,SAACZ,GAAD,OAAQa,SAASb,KAAQS,KAC/E,EAAKtC,SAAS,CAACI,SAAS,2BAAK,EAAKe,MAAMf,UAAjB,kBAA4B0B,EAAMrD,OAAO0E,cAAcG,kBAAkBF,YAAYC,cAAgB,OAAOlD,gBAAiBqC,MA3J1I,EA+JdgB,kBAAoB,SAAA1B,GAClB,OAAO,EAAKX,MAAMhC,MAChB,KAAK,EACH,GAAI,EAAKgC,MAAMlB,aAER,CAEL,GAAG,EAAKkB,MAAMb,SAAU,CAEtB,IADA,IAAMmD,EAAU,GAChB,MAA2BC,OAAOC,QAAQ,EAAKxC,MAAMyC,UAAU,IAA/D,eAAoE,CAAC,IAAD,sBAAxDrH,EAAwD,UAACkH,EAAQnH,KAAKC,GAClF,EAAKyD,SAAS,CAACnD,aAAc4G,EAASvD,gBAAiBuD,EAAQ7B,KAAI,SAAAC,GAAE,OAAI,OAAQ,WAC/ElC,KAAKK,SAAS,CAACb,KAAM,IAAI,uBAK3B0E,IAAKC,MAAM,EAAK3C,MAAMlB,aAAc,EAAK8D,QAE3C,EAAK/D,SAAS,CAACb,KAAM,SAdrBoB,OAAOC,MAAM,yCAgBf,MACF,KAAK,EACH,EAAKR,SAAS,CAACb,KAAM,IACrB,MACF,KAAK,EACH,GAAI,EAAKgC,MAAMxC,WAAc,EAAKwC,MAAM3B,sBAetC,EAAKQ,SAAS,CACZb,KAAM,EACNc,aAAc,KACdpD,aAAc,GACdqD,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,CACRzE,GAAI,KACJyC,KAAM,KACNC,UAAW,MAEbgC,gBAAgB,EAChBpB,kBAAkB,EAClBO,uBAAuB,EACvBb,UAAW,KACXE,WAAY,KACZzD,gBAAgB,EAChBkF,UAAU,EACV/B,QAAS,KACTqF,UAAW,WAlCgD,CAG7D,EAAK5D,SAAS,CAACK,gBAAiB,EAAKc,MAAMd,iBAC3C,IAAM2D,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQ,EAAK/C,MAAMlB,cAC/B+D,EAAKE,OAAO,gBAAiB,EAAKrG,oBAClCmG,EAAKE,OAAO,KAAM,EAAK/C,MAAMf,SAASzE,IACtCqI,EAAKE,OAAO,OAAQ,EAAK/C,MAAMf,SAAShC,MACxC4F,EAAKE,OAAO,YAAa,EAAK/C,MAAMf,SAAS/B,WAC7C2F,EAAKE,OAAO,YAAa,EAAK/C,MAAMb,UACpC,EAAK6D,cAAcC,kBAAkBJ,GA0BvC,MACF,QACEK,QAAQC,IAAI,EAAKnD,MAAMhC,QA/Nf,EAoOdoF,gBAAkB,WAChB,OAAO,EAAKpD,MAAMhC,MAChB,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,kBACT,KAAK,EACH,MAAO,mBACT,QACEkF,QAAQC,IAAI,EAAKnD,MAAMhC,QA7Of,EAkPdtB,iBAAmB,WACjB,OAAO,EAAKsD,MAAMtE,aAAa4F,QAAO,SAACZ,EAAIS,GACzC,QAAG,EAAKnB,MAAMjB,gBAAgBoC,OApPpB,EA2PdkC,aAAe,SAAA1C,GAEb,EAAK9B,SAAS,CACZb,KAAM,EACNc,aAAc,KACdpD,aAAc,GACdqD,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,CACRzE,GAAI,KACJyC,KAAM,KACNC,UAAW,MAEbgC,gBAAgB,EAChBpB,kBAAkB,EAClBO,uBAAuB,EACvBb,UAAW,KACXE,WAAY,KACZzD,gBAAgB,EAChBkF,UAAU,EACV/B,QAAS,KACTqF,UAAW,QAhRD,EAoRda,cAAgB,WACd,OAAO,EAAKtD,MAAMhC,MAChB,KAAK,EACH,OAAO,kBAACjE,EAAD,CAAYa,gBAAiB,EAAKA,gBAAiB2I,YAAa,EAAKvD,MAAM/F,iBACpF,KAAK,EACH,OAAO,kBAACY,EAAD,CAAgB6B,iBAAkB,EAAKA,mBAAoBhB,aAAc,EAAKsE,MAAMtE,aAAcS,iBAAkB,EAAKA,iBAAkBM,aAAc,EAAKA,eACvK,KAAK,EACH,OAAO,kBAACE,EAAD,CAAeI,gBAAiB,EAAKL,mBAAoBM,aAAc,EAAKgD,MAAMf,SAAUnB,iBAAkB,EAAKkC,MAAMlC,iBAAkBN,UAAW,EAAKwC,MAAMxC,UAAWE,WAAY,EAAKsC,MAAMtC,WAAYN,QAAS,EAAK4C,MAAM5C,UAC5O,QACE,OAAO,kBAACrD,EAAD,CAAYa,gBAAiB,EAAKA,oBA7RjC,EAiSd4I,eAAiB,WACf,OAAO,EAAKxD,MAAMhC,MAChB,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,GACT,KAAK,EACH,OAAO,IACT,QACE,OAAO,IA1SC,EA8SdyF,kBAAoB,WAClB,OAAO,EAAKzD,MAAMhC,MAChB,KAAK,EACH,GAAG,EAAKgC,MAAMlB,aAAc,OAAO,EACnC,MACF,KAAK,EAGL,KAAK,EACH,GAAG,EAAKkB,MAAMf,SAASzE,IAAM,EAAKwF,MAAMf,SAAShC,MAAQ,EAAK+C,MAAMf,SAAS/B,WAAa,EAAK8C,MAAMjB,gBAAgBgD,UAAS,GAAO,OAAO,EAC5I,MACF,QACE,OAAO,IAvTX,EAAK/B,MAAQ,CACXhC,KAAM,EACNc,aAAc,KACdpD,aAAc,GACdqD,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,CACRzE,GAAI,KACJyC,KAAM,KACNC,UAAW,MAEbgC,gBAAgB,EAChBpB,kBAAkB,EAClB7D,gBAAgB,EAChBkF,UAAU,GAGZ,EAAK6D,cAAgB,IAAI1E,EAAJ,gBAErB,EAAKsE,OAAS,CACZc,UAAW,GACXC,QAAS,GACTC,UAAW,IACXC,WAAY,IACZzB,QAAQ,EACR0B,qBAAiBC,EACjBC,eAAe,EACfC,QAAS,EACTC,SAAU,GACVC,QAAQ,EACRC,UAAU,EACVpG,UAAM+F,EACNM,SAAU,EAAKjE,cACfzB,WAAOoF,EACPO,UAAU,EACVC,4BAAwBR,EACxBS,yBAAqBT,EACrBU,gBAAgB,EAChBC,WAAOX,EACPY,eAAWZ,EACXa,cAAUb,EACVc,sBAAkBd,EAClBe,qBAAiBf,EACjBgB,eAAWhB,EACXiB,kBAAmB,CAAC,IAAK,KAAM,IAAK,IAAKtC,IAAKuC,WAAYvC,IAAKwC,WAGjE,EAAKC,cAAgB,CACnBC,QAAQ,EACRxB,UAAW,IACXC,WAAY,IACZH,UAAW,IACXtB,QAAQ,EACRuB,QAAS,OACTc,gBAAgB,EAChBY,QAAS,MA1DC,E,qDA+TZ,OACE,oCACA,kBAACC,EAAA,EAAD,CAAMjL,UAAU,kBACd,kBAACiL,EAAA,EAAKC,OAAN,CAAahJ,GAAG,OACd,kBAACd,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACP,wBAAIvB,UAAU,cAAcmE,KAAK4E,oBAEnC,kBAACzH,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACmC,EAAD,CAAmBE,cAAeO,KAAKwB,MAAMhC,KAAMK,sBAAuBG,KAAKwB,MAAM3B,2BAI3F,kBAACiH,EAAA,EAAKE,KAAN,KACGhH,KAAK8E,iBAER,kBAACgC,EAAA,EAAKG,OAAN,KACGjH,KAAKwB,MAAMhC,KAAO,IAAMQ,KAAKwB,MAAM3B,sBAAwB,kBAACqH,EAAA,EAAD,CAAQrL,UAAU,gBAAgBsL,QAAQ,YAAYC,QAASpH,KAAK6E,cAApE,UAAoG,KAE7J7E,KAAKwB,MAAMd,eACV,kBAACwG,EAAA,EAAD,CAAQrL,UAAU,sBAAsBsL,QAAQ,UAAUE,UAAQ,GAChE,kBAAC3L,EAAA,EAAD,CACEqC,GAAG,OACHpC,UAAU,SACV2L,KAAK,KACL1L,KAAK,SACL2L,cAAY,SAEd,0BAAM1L,UAAU,WAAhB,eATyB,kBAACqL,EAAA,EAAD,CAAQrL,UAAU,sBAAsBsL,QAAQ,UAAUC,QAASpH,KAAK6D,kBAAmBwD,UAAWrH,KAAKiF,qBAA0C,IAApBjF,KAAKwB,MAAMhC,KAAaQ,KAAKwB,MAAMxC,WAAagB,KAAKwB,MAAM3B,sBAAwB,iBAAmB,SAAW,UAcrR,uBAAGhE,UAAU,aAAaiB,MAAO,CAAC0K,SAAU,OAAQC,UAAW,SAAU/H,MAAO,SAAhF,2C,GAjWYgI,IAAMC,WCEJC,QACW,cAA7BhH,OAAOiH,SAASC,UAEe,UAA7BlH,OAAOiH,SAASC,UAEhBlH,OAAOiH,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFhF,SAASiF,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpH,MAAK,SAAAqH,GACJA,EAAaC,gBAEd7G,OAAM,SAAAvB,GACLuE,QAAQvE,MAAMA,EAAMqI,c","file":"static/js/main.d5f6e0a0.chunk.js","sourcesContent":["import React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function FileUpload(props) { // this is the component where we render the file upload input\n    if(props.convertingFile) {\n        return(\n            <div>\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n            </div>\n        )\n    } else {\n        return(\n            <div>\n                <h6>Upload your dataset to this page and click next when you finish.</h6>\n                <form method=\"post\" action=\"#\" id=\"#\">\n                    <div className=\"form-group files\">\n                        <input type=\"file\" className=\"form-control fc-custom\" multiple=\"\" onChange={props.onChangeHandler} />\n                    </div>\n                    <span className=\"text-muted\">*supports .csv, .tsv, .xlsx and .xls file types.</span>\n                </form>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function AdjustSettings(props) { // Adjust Settings Content\n    function renderHeaders(tableHeaders) { // this function renders availableHeaders to user\n        const transformedArr = []\n        for(let i = 0; i < tableHeaders.length; i++) {\n            transformedArr.push(\n                <Col lg={4} key={i}>\n                    <Form.Group controlId={i} key={i}>\n                        <Form.Check type=\"checkbox\" label={tableHeaders[i]} defaultChecked={true} onChange={props.onChangeCheckbox} />\n                    </Form.Group>\n                </Col>\n            )\n        }\n        return transformedArr\n    }\n\n    function renderAvailableOptions(options) { // this function renders available option in dropdown lists\n        const transformedArr = []\n        for(let i = 0; i < options.length; i++) {\n            transformedArr.push(<option key={i} value={i}>{options[i]}</option>)\n        }\n        return transformedArr\n    }\n\n    return(\n        <div style={{overflow: \"auto\", maxHeight: '100%'}}>\n            <div className=\"exclude-columns\">\n                <h6>Exclude columns by untoggling the checkbox.</h6>\n                <div className=\"headers-column\">\n                    <Row>\n                        {renderHeaders(props.tableHeaders)}\n                    </Row>\n                </div>\n            </div>\n            <div>\n                <h6>Choose included columns to uniquely assign to <b>ID, Name,</b> and <b>Timestamp.</b></h6>\n                <div className=\"headers-column\">\n                    <div className=\"list-form-input\">\n                        <Form.Label><b>ID</b></Form.Label>\n                        <Form.Control className=\"fc-custom2\" as=\"select\" defaultValue={null} onChange={props.onChangeList}>\n                            <option key={\"selectVal\"} value=\"-1\">Select Value</option>\n                            {renderAvailableOptions(props.availableHeaders)}\n                        </Form.Control>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Form.Label><b>Name</b></Form.Label>\n                        <Form.Control className=\"fc-custom2\" as=\"select\" defaultValue={null} onChange={props.onChangeList}>\n                            <option key={\"selectVal\"} value=\"-1\">Select Value</option>\n                            {renderAvailableOptions(props.availableHeaders)}\n                        </Form.Control>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Form.Label><b>Timestamp</b></Form.Label>\n                        <Form.Control className=\"fc-custom2\" as=\"select\" defaultValue={null} onChange={props.onChangeList}>\n                            <option key={\"selectVal\"} value=\"-1\">Select Value</option>\n                            {renderAvailableOptions(props.availableHeaders)}\n                        </Form.Control>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function ConfirmUpload(props) {\n    function renderHeaders(tableHeaders) { // renders choosen headers in the last step to confirm\n        const transformedArr = []\n        for(let i = 0; i < tableHeaders.length; i++) {\n            transformedArr.push(\n                <Col lg={4} key={i}>                    \n                    <span>{tableHeaders[i]}</span>\n                </Col>\n            )\n        }\n        return transformedArr\n    }\n\n    function generateErrorMessage(errorType) { // this function returns appropiate error message we got from the backend\n        // errorType: 0 => both, 1 => duplicate_id, 2 => non_convertible_timestamp\n        switch(errorType) {\n            case 0:\n                return <u>were duplicate id's and non-convertible timestamps.</u>\n            case 1:\n                return <u>were duplicate id's.</u>\n            case 2:\n                return <u>were non-convertible timestamps.</u>\n            default:\n                return <u>were duplicate id's and non-convertible timestamps.</u>\n        }\n    }\n\n    function transformArraysIntoList(arr, double) { //transfers array into columns to present a simple UI to the user\n        const transformedArr = []\n        for(let i = 0; i < arr.length; i++) {\n            transformedArr.push(<Col key={i} lg={double ? 4 : 3}>{arr[i]}</Col>)\n        }\n        return transformedArr\n    }\n\n    function generateIdLists(errorLists) { // in this function we basically render errors we got from the backend with respective ID's\n        if(errorLists.duplicate_id_list && errorLists.non_convertible_timestamp_id_list) {\n            return(\n                <div>\n                    <Row>\n                        <Col>\n                            Duplicate ID's:\n                            <Row>\n                                {transformArraysIntoList(errorLists.duplicate_id_list, true)}\n                            </Row>\n                        </Col>\n                        <Col>\n                            ID's of the non-convertible timestamps:\n                            <Row>\n                                {transformArraysIntoList(errorLists.non_convertible_timestamp_id_list, true)}\n                            </Row>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        } else if(errorLists.duplicate_id_list) {\n            return(\n                <div>\n                    Duplicate ID's:\n                    <Row>\n                        {transformArraysIntoList(errorLists.duplicate_id_list, false)}\n                    </Row>\n                </div>\n            )\n        } else {\n            return(\n                <div>\n                    ID's of the non-convertible timestamps:\n                    <Row>\n                        {transformArraysIntoList(errorLists.non_convertible_timestamp_id_list, false)}\n                    </Row>\n                </div>\n            )\n        }\n    }\n\n    function renderResponseInfo(bool) { // In this function we render information about the response we got from the backend\n        if(bool) {\n            if(props.fileUrl) {\n                // success\n                return(\n                    <div className=\"response-info\">\n                        <h6><b>Your dataset was succesfully imported to our system.</b> You can upload another dataset if you'd like to.</h6>\n                        <br />\n                        <b><a href={props.fileUrl}>Download the imported dataset.</a></b>\n                        <br />\n                        <i><b><a href=\"http://calm-ocean-20734.herokuapp.com/text_data_files/\" target=\"_blank\" rel=\"noopener noreferrer\">See index page for all imported files.</a></b></i>\n                    </div>\n                )\n            } else {\n                // error\n                return(\n                    <div className=\"response-info\">\n                        <h6>{\"We couldn't import your file because there \"}{generateErrorMessage(props.errorType)}</h6>\n                        {generateIdLists(props.errorLists)}\n                    </div>\n                )\n            }\n        }\n    }\n\n    return(\n        <div style={{overflow: \"auto\", maxHeight: '100%'}}>\n            <div className=\"exclude-columns\">\n                <h6>Included Columns:</h6>\n                <div className=\"headers-column\">\n                    <Row>\n                        {renderHeaders(props.selectedHeaders)}\n                    </Row>\n                </div>\n            </div>\n            <div>\n                <h6>ID, Name, and Timestamp assignment:</h6>\n                <div className=\"headers-column\">\n                    <div className=\"list-form-input\">\n                        <Row>\n                            <Col lg={3}>\n                                <span className=\"assignment-title\"><b>ID:</b></span>\n                            </Col>\n                            <Col>\n                                {props.assignedInfo.id}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Row>\n                            <Col lg={3}>\n                                <span className=\"assignment-title\"><b>Name:</b></span>\n                            </Col>\n                            <Col>\n                                {props.assignedInfo.name}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"list-form-input\">\n                        <Row>\n                            <Col lg={3}>\n                                <span className=\"assignment-title\"><b>Timestamp:</b></span>\n                            </Col>\n                            <Col>\n                                {props.assignedInfo.timestamp}\n                            </Col>\n                        </Row>                       \n                    </div>\n                </div>\n            </div>\n            {renderResponseInfo(props.loadResponseInfo)}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function CustomProgressBar(props) { // this is the custom progress bar built for specifically this project\n    const step = props.activatedStep\n    return(\n        <div className=\"myProgress\">\n            <div className=\"myBar\">\n                <div className=\"step-container\" style={{width: step > 1 ? step > 2 ? \"100%\" : \"50%\" : \"0%\"}}>\n                    <span className={step === 1 ? \"step-activated\" : \"step-completed\"}><span className=\"check-mark\" style={{display: step === 1 ? \"none\" : \"block\"}}>✓</span></span>\n                    <span className={step < 2 ? \"step\" : step === 2 ? \"step-activated\" : \"step-completed\"} style={{marginLeft: \"50%\"}}><span className=\"check-mark\" style={{display: step === 3 ? \"block\" : \"none\"}}>✓</span></span>\n                    <span className={step > 2 ? props.successfullyCompleted ? \"step-completed\" : \"step-activated\" : \"step\"} style={{marginLeft: \"100%\"}}><span className=\"check-mark\" style={{display: !props.successfullyCompleted ? \"none\" : \"block\"}}>✓</span></span>\n                </div>\n            </div>\n            <small className=\"step-text\">Upload Dataset</small>\n            <small className=\"step-text\" style={{marginLeft: \"50%\"}}>Adjust Settings</small>\n            <small className=\"step-text\" style={{marginLeft: \"97%\"}}>Confirm & Upload</small>\n        </div>\n    )\n}","export default class UploadService {\n    constructor(component) {\n        this.testURL = \"http://localhost:3000/text_data_files\" // local server url for testing on local server\n        this.prodURL = \"https://calm-ocean-20734.herokuapp.com/text_data_files\" // production url which is hosted on heroku, if the server is asleep you may need to wait around 20 seconds to get a response back\n        this.component = component\n    }\n\n    cancelUploadAndShowError(error) { // this function displays alert messages if request to the backend fails and before it resets the state of the App Component\n        const errorMsg = error ? ` Here is the error message: ${error}` : \"\"\n        this.component.setState({\n            step: 1,\n            selectedFile: null,\n            tableHeaders: [],\n            excludedHeaders: [],\n            assignedHeaders: [],\n            assigned: {\n                id: null,\n                name: null,\n                timestamp: null\n            },\n            resultsLoading: false,\n            loadResponseInfo: false,\n            convertingFile: false,\n            asString: false,\n        }, function() {\n            window.alert(\"Ooops! Something went wrong please try again.\" + errorMsg)\n        })\n    }\n\n    uploadFileToParse(requestBody) { // this is the fetch function where we actually make the request and handle the response\n        fetch(this.prodURL, { // changing prod - test from here for server\n            method: \"POST\",\n            body: requestBody\n        })\n        .then(r => r.json())\n        .then(response => {\n            if(!response.error && !response.link) {\n                // server didn't respond as expected\n                this.cancelUploadAndShowError()\n            } else if(response.error) {\n                // handle error\n                // errorType: 0 => both, 1 => duplicate_id, 2 => non_convertible_timestamp\n                let errorType = null\n                let errorLists = null\n                if(response.duplicate_id_list_length > 0 && response.non_convertible_timestamp_id_list_length > 0) {\n                    errorType = 0\n                    errorLists = {\n                        duplicate_id_list: response.duplicate_id_list,\n                        non_convertible_timestamp_id_list: response.non_convertible_timestamp_id_list\n                    }\n                } else if(response.duplicate_id_list_length > 0) {\n                    errorType = 1\n                    errorLists = {\n                        duplicate_id_list: response.duplicate_id_list,\n                    }\n                } else {\n                    errorType = 2\n                    errorLists = {\n                        non_convertible_timestamp_id_list: response.non_convertible_timestamp_id_list\n                    }\n                }\n                this.component.setState({errorType: errorType, errorLists: errorLists}, () => {\n                    this.component.setState({loadResponseInfo: true}, () => {\n                        this.component.setState({resultsLoading: !this.component.state.resultsLoading})\n                    })\n                })\n            } else {\n                //handle success\n                this.component.setState({fileUrl: response.link}, () => {\n                    this.component.setState({loadResponseInfo: true}, () => {\n                        this.component.setState({resultsLoading: !this.component.state.resultsLoading, successfullyCompleted: true})\n                    })\n                })\n            }\n        })\n        .catch(error => this.cancelUploadAndShowError(error))\n    }\n}","import React from 'react';\nimport { Card, Button, Row, Col, Spinner } from 'react-bootstrap';\nimport FileUpload from './sub-components/FileUpload.js';\nimport AdjustSettings from './sub-components/AdjustSettings.js';\nimport ConfirmUpload from './sub-components/ConfirmUpload.js';\nimport CustomProgressBar from './sub-components/CustomProgressBar.js';\nimport UploadService from './services/UploadService.js';\nimport Papa from 'papaparse';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      step: 1, // which step user is at\n      selectedFile: null, // uploaded file \n      tableHeaders: [], // all headers system parsed from the selected file\n      excludedHeaders: [], // a boolean array to keep track of excluded headers \n      assignedHeaders: [], // keeping track of assigned headers to the ID, Timestamp and Name\n      assigned: { // before sending request to the backend collecting assigned headers in one object\n        id: null,\n        name: null,\n        timestamp: null\n      },\n      resultsLoading: false, // when we make request this for displaying loading icon on the button\n      loadResponseInfo: false, // this prop is passed to the child component(ConfirmUpload) to render the message we got from the backend\n      convertingFile: false, // when we convert excel files on frontend this prop is used show loading icon\n      asString: false, // when we send excel files to the backend we send them as a string so this is used indicate whether we are sending string or an actual file\n    }\n\n    this.uploadService = new UploadService(this) // setting up the class for communicating with our backend - concept is called \"Dependency Injection\"\n    \n    this.config = { // this object is passed as an argument to the JS CSV parser method\n      delimiter: \"\",\t// auto-detect\n      newline: \"\",\t// auto-detect\n      quoteChar: '\"',\n      escapeChar: '\"',\n      header: false,\n      transformHeader: undefined,\n      dynamicTyping: false,\n      preview: 1, // for getting the headers\n      encoding: \"\",\n      worker: false,\n      comments: false,\n      step: undefined,\n      complete: this.parseComplete,\n      error: undefined,\n      download: false,\n      downloadRequestHeaders: undefined,\n      downloadRequestBody: undefined,\n      skipEmptyLines: false,\n      chunk: undefined,\n      chunkSize: undefined,\n      fastMode: undefined,\n      beforeFirstChunk: undefined,\n      withCredentials: undefined,\n      transform: undefined,\n      delimitersToGuess: [',', '\\t', '|', ';', Papa.RECORD_SEP, Papa.UNIT_SEP]\n    }\n\n    this.unparseConfig = { // this object is passed as an argument to the JS CSV unParser method\n      quotes: false, //or array of booleans\n      quoteChar: '\"',\n      escapeChar: '\"',\n      delimiter: \",\",\n      header: true,\n      newline: \"\\r\\n\",\n      skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.\n      columns: null //or array of strings\n    }\n  }\n  \n  parseComplete = (results, parser) => { // call-back function, called when parsing operation is complete\n    if(results.errors.length > 0) { // didn't add error handling for this one\n      // error handling\n\n    } else {\n      // load start\n      this.setState({tableHeaders: results.data[0], excludedHeaders: results.data[0].map(el => true)}, function(){ // we are assigning the first row of the parsed file as the headers and then we create the boolean array for excludedHeaders initially all values are true\n        this.setState({step: 2}, function() { // When parsing is complete and we have the necessary files we move onto second step\n          // load end\n\n        })\n      })\n    }\n  }\n\n  onChangeHandler = event => { // this function handles changes made on the File Input\n    if(event.target.files[0].name.substr(-4) === \"xlsx\") {\n      //if file is .xlsx\n      window.parseExcelXLSX(event.target.files[0], this)\n    } else if(event.target.files[0].name.substr(-3) === \"xls\") {\n      //if file is .xls\n      window.parseExcelXLS(event.target.files[0], this)\n    } else if(event.target.files[0].name.substr(-3) === \"csv\" || event.target.files[0].name.substr(-3) === \"tsv\") {\n      //if file is .csv or .tsv\n      this.setState({selectedFile: event.target.files[0]})\n    } else {\n      //if file is not supported\n      window.alert(\"Our system doesn't support the file. Please convert it to one of the supported file type and then try again.\")\n      event.target.value = \"\"\n    }\n  }\n\n  onChangeCheckbox = event => { // this function handles when user includes or excludes headers in the second step\n    const newArr = this.state.excludedHeaders.slice()\n    newArr[event.target.id] = !newArr[event.target.id]\n    for(let val in this.state.assigned) {\n      if(this.state.assigned[val] === this.state.tableHeaders[event.target.id]) {\n        let availableHeaders = this.availableHeaders()\n        let idx = availableHeaders.indexOf(this.state.tableHeaders[event.target.id])\n        let newAssHeaders = this.state.assignedHeaders.filter(el => parseInt(el) === idx ? false : true)\n        let targetFormInput = 0\n        switch(val) {\n          case \"id\":\n            targetFormInput = 0\n            break;\n          case \"name\":\n            targetFormInput = 1\n            break;\n          case \"timestamp\":\n            targetFormInput = 2\n            break;\n          default:\n            targetFormInput = 0\n            break;\n        }\n        let input = document.getElementsByClassName(\"list-form-input\")[targetFormInput]\n        input.children[1].value = -1\n        this.setState({\n          assigned: {...this.state.assigned, [val]: null},\n          assignedHeaders: newAssHeaders\n        })\n      }\n    }\n    this.setState({excludedHeaders: newArr})\n  }\n\n  syncAssHeadersState = () => { // this function is called when we have changes on the headers to make sure our double-source is synced with each other\n    let currentAssHeaders = []\n    for(let val in this.state.assigned) {\n      let i = this.availableHeaders().indexOf(this.state.assigned[val])\n      if(i > -1) currentAssHeaders.push(i)\n    }\n\n    this.setState({assignedHeaders: [...new Set(currentAssHeaders)]})\n  }\n\n  onChangeList = event => { // this function handles the dropdown list for assigning columns \n    let val = parseInt(event.target.value)\n    if(val > -1) {\n      // debugger\n      if(this.state.assignedHeaders.includes(val)) {\n        window.alert(\"You already assigned this column.\")\n        let idx = this.availableHeaders().indexOf(this.state.assigned[event.target.parentElement.children[0].textContent.toLowerCase()])\n        event.target.value = idx\n        return;\n      }\n      this.state.assignedHeaders.push(val)\n      this.setState({assigned: {...this.state.assigned, [event.target.parentElement.firstElementChild.textContent.toLowerCase()]: this.availableHeaders()[val]}}, this.syncAssHeadersState)\n    } else {\n      //remove the value from assigned\n      let header = this.state.assigned[event.target.parentElement.firstElementChild.textContent.toLowerCase()]\n      let idx = this.availableHeaders().indexOf(header)\n      let newAssHeaders = this.state.assignedHeaders.filter((el) => parseInt(el) !== idx ? true : false)\n      this.setState({assigned: {...this.state.assigned, [event.target.parentElement.firstElementChild.textContent.toLowerCase()]: null}, assignedHeaders: newAssHeaders})\n    }\n  }\n\n  nextButtonHandler = event => { // this function handles clicks for next button which is located right-bottom on the ui\n    switch(this.state.step) {\n      case 1: // in first step we check if we have an actual file or string and we act depending on that\n        if(!this.state.selectedFile) {\n          window.alert(\"Please select a file to move forward.\")\n        } else {\n          // move forward\n          if(this.state.asString) {\n            const headers = []\n            for (const [key, value] of Object.entries(this.state.converted[0])) {headers.push(key)} //eslint-disable-line\n            this.setState({tableHeaders: headers, excludedHeaders: headers.map(el => true)}, function(){\n              this.setState({step: 2}, function() {\n                // load end\n              })\n            })\n          } else {\n            Papa.parse(this.state.selectedFile, this.config)\n          }\n          this.setState({step: 2})\n        }\n        break;\n      case 2: // we don't have to do anything on second step\n        this.setState({step: 3})\n        break;\n      case 3: // this where we make the request to the backend\n        if(!this.state.errorType && !this.state.successfullyCompleted) {\n          // send the request\n          // start loading icon\n          this.setState({resultsLoading: !this.state.resultsLoading})\n          const form = new FormData() // creating the form object for request body\n          form.append(\"file\", this.state.selectedFile)\n          form.append(\"table_headers\", this.availableHeaders())\n          form.append(\"id\", this.state.assigned.id)\n          form.append(\"name\", this.state.assigned.name)\n          form.append(\"timestamp\", this.state.assigned.timestamp)\n          form.append(\"as_string\", this.state.asString)\n          this.uploadService.uploadFileToParse(form)\n          // end loading icon\n        } else {\n          // upload another, reset the state\n          this.setState({\n            step: 1,\n            selectedFile: null,\n            tableHeaders: [],\n            excludedHeaders: [],\n            assignedHeaders: [],\n            assigned: {\n              id: null,\n              name: null,\n              timestamp: null\n            },\n            resultsLoading: false,\n            loadResponseInfo: false,\n            successfullyCompleted: false,\n            errorType: null,\n            errorLists: null,\n            convertingFile: false,\n            asString: false,\n            fileUrl: null,\n            converted: null,\n          })\n        }        \n        break;\n      default:\n        console.log(this.state.step)\n    }\n  }\n\n  // Changing page title according to the current step\n  renderPageTitle = () => {\n    switch(this.state.step) {\n      case 1:\n        return \"Upload Dataset\"\n      case 2:\n        return \"Adjust Settings\"\n      case 3:\n        return \"Confirm & Upload\"\n      default:\n        console.log(this.state.step)\n    }\n  }\n\n  // Filtering exlcuded headers from all headers\n  availableHeaders = () => {\n    return this.state.tableHeaders.filter((el, idx) => {\n      if(this.state.excludedHeaders[idx]) {\n        return true\n      }\n      return false\n    })\n  }\n  // If user clicks cancel this function resets every state property to its initial value\n  cancelUpload = event => {\n    // cancel upload\n    this.setState({\n      step: 1,\n      selectedFile: null,\n      tableHeaders: [],\n      excludedHeaders: [],\n      assignedHeaders: [],\n      assigned: {\n        id: null,\n        name: null,\n        timestamp: null\n      },\n      resultsLoading: false,\n      loadResponseInfo: false,\n      successfullyCompleted: false,\n      errorType: null,\n      errorLists: null,\n      convertingFile: false,\n      asString: false,\n      fileUrl: null,\n      converted: null,\n    })\n  }\n\n  renderContent = () => { // this function renders the main content on UI based on the step value we have in the state\n    switch(this.state.step) {\n      case 1:\n        return <FileUpload onChangeHandler={this.onChangeHandler} fileLoading={this.state.convertingFile} />\n      case 2:\n        return <AdjustSettings availableHeaders={this.availableHeaders()} tableHeaders={this.state.tableHeaders} onChangeCheckbox={this.onChangeCheckbox} onChangeList={this.onChangeList} />\n      case 3:\n        return <ConfirmUpload selectedHeaders={this.availableHeaders()} assignedInfo={this.state.assigned} loadResponseInfo={this.state.loadResponseInfo} errorType={this.state.errorType} errorLists={this.state.errorLists} fileUrl={this.state.fileUrl} />\n      default: \n        return <FileUpload onChangeHandler={this.onChangeHandler} />\n    }\n  }\n\n  stepToProgress = () => { // this function returns the appropiate percentage for the progress bar based on step value \n    switch(this.state.step) {\n      case 1:\n        return 0\n      case 2:\n        return 50\n      case 3:\n        return 100\n      default:\n        return 0\n    }\n  }\n\n  nextButtonEnabled = () => { // this function returns boolean to disable or enable or next button depending on provided inputs from the user\n    switch(this.state.step) {\n      case 1:\n        if(this.state.selectedFile) return true\n        break;\n      case 2:\n        if(this.state.assigned.id && this.state.assigned.name && this.state.assigned.timestamp && this.state.excludedHeaders.includes(true)) return true\n        break;\n      case 3:\n        if(this.state.assigned.id && this.state.assigned.name && this.state.assigned.timestamp && this.state.excludedHeaders.includes(true)) return true\n        break;\n      default:\n        return false\n    }\n  }\n\n  render() {\n    return(\n      <>\n      <Card className=\"main-container\">\n        <Card.Header as=\"div\">\n          <Row>\n            <Col lg={4}>\n              <h5 className=\"card-title\">{this.renderPageTitle()}</h5>\n            </Col>\n            <Col lg={8}>\n              <CustomProgressBar activatedStep={this.state.step} successfullyCompleted={this.state.successfullyCompleted} />\n            </Col>\n          </Row>\n        </Card.Header>\n        <Card.Body>\n          {this.renderContent()}\n        </Card.Body>\n        <Card.Footer>\n          {this.state.step > 1 && !this.state.successfullyCompleted ? <Button className=\"cancel-button\" variant=\"secondary\" onClick={this.cancelUpload}>Cancel</Button> : null}\n          {\n            !this.state.resultsLoading ? <Button className=\"move-forward-button\" variant=\"primary\" onClick={this.nextButtonHandler} disabled={!this.nextButtonEnabled()}>{this.state.step === 3 ? this.state.errorType || this.state.successfullyCompleted ? \"Upload Another\" : \"Upload\" : \"Next\"}</Button>\n            : <Button className=\"move-forward-button\" variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"sr-only\">Loading...</span>\n              </Button>\n          }\n        </Card.Footer>\n      </Card>\n      <p className=\"text-muted\" style={{fontSize: '11px', textAlign: 'center', width: '100%'}}>created by emirhan kaplan in 2020.</p>\n      </>\n    )\n  }\n}\n\nexport default App;\n\n// .TXT Conversion - Not Working! Because there is a lot different formats we can get from the user\n// else if(event.target.files[0].name.substr(-3) === \"txt\") {\n//   var reader = new FileReader();\n//   var component = this\n//   reader.onload = function(event) {\n//     var cells = event.target.result.split('\\n').map(function (el) { return el.split(/\\s+/); });\n//     var headings = cells.shift();\n//     var json_object = cells.map(function (el) {\n//       var obj = {};\n//       for (var i = 0, l = el.length; i < l; i++) {\n//         obj[headings[i]] = isNaN(Number(el[i])) ? el[i] : +el[i];\n//       }\n//       return obj;\n//     });\n//     component.setState({converted: json_object}, function() {\n//       //after loaded\n//       const convertedToString = Papa.unparse(json_object, this.unparseConfig)\n//       component.setState({convertingFile: false, selectedFile: convertedToString, asString: true})\n//       console.log(convertedToString)\n//     })\n//   };\n//   reader.readAsText(event.target.files[0]);\n// } ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}